#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void quick_sort(vector<int> &arr, int low, int high, int& cnt);
void insertionSort(vector<int> ar, int &cnt);
int partition(vector<int> &arr, int low, int high, int& cnt);



int main()
{
	int t;
	cin >> t;

	vector<int> arr(t);
	for (int i = 0; i < t; i++)
	{
		cin >> arr[i];
	}
	int cntInsert, cntQuick;
	cntInsert = cntQuick = 0;
	insertionSort(arr, cntInsert);
	quick_sort(arr, 0, arr.size(), cntQuick);
	cout << cntInsert - cntQuick << endl;

	int tmp;
	cin >> tmp;
	return 0;
}


void quick_sort(vector<int> &arr, int low, int high, int& cnt)
{
	if (low < high - 1)
	{
		int p = partition(arr, low, high, cnt);
		quick_sort(arr, low, p, cnt);
		quick_sort(arr, p + 1, high, cnt);
	}
}


int partition(vector<int> &arr, int low, int high, int& cnt)
{
	int pivot = arr[high - 1];
	int i = low - 1;
	for (int j = low; j < high - 1; j++)
	{
		if (arr[j] <= pivot)
		{
			i++;
			swap(arr[i], arr[j]);
			cnt++;
		}
	}
	swap(arr[i + 1], arr[high - 1]);
	cnt++;
	return i + 1;
}

void insertionSort(vector<int> ar, int &cnt)
{
	int j;
	for (int i = 1; i != ar.size(); i++)
	{
		int x = ar[i];
		j = i - 1;
		while (j != -1 && ar[j] > x)
		{
			ar[j + 1] = ar[j];
			cnt++;
			j--;
		}
		ar[j + 1] = x;
	}
}
